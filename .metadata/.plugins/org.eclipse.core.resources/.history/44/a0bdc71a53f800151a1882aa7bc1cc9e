package edu.towson.cis.cosc442.project4.coffeemaker;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;

import org.junit.Test;

import junit.framework.TestCase;

/**
 *
 */
public class CoffeeMakerTest extends TestCase {
	private CoffeeMaker cm;
	private Inventory i;
	private Recipe r1, r2, r3, r4, r5, r6;

	public void setUp() {
		cm = new CoffeeMaker();
		i = cm.checkInventory();

		r1 = new Recipe();
		r1.setName("Coffee");
		r1.setPrice(50);
		r1.setAmtCoffee(6);
		r1.setAmtMilk(1);
		r1.setAmtSugar(1);
		r1.setAmtChocolate(0);
		
		r2 = new Recipe();
		r2.setName("Frap");
		r2.setPrice(50);
		r2.setAmtCoffee(6);
		r2.setAmtMilk(1);
		r2.setAmtSugar(1);
		r2.setAmtChocolate(0);
		
		r3 = new Recipe();
		r3.setName("Latte");
		r3.setPrice(50);
		r3.setAmtCoffee(6);
		r3.setAmtMilk(1);
		r3.setAmtSugar(1);
		r3.setAmtChocolate(0);
		
		r4 = new Recipe();
		r4.setName("Mocha");
		r4.setPrice(50);
		r4.setAmtCoffee(6);
		r4.setAmtMilk(1);
		r4.setAmtSugar(1);
		r4.setAmtChocolate(0);
		
		r5 = new Recipe();
		r5.setName("Espresso");
		r5.setPrice(50);
		r5.setAmtCoffee(6);
		r5.setAmtMilk(1);
		r5.setAmtSugar(1);
		r5.setAmtChocolate(0);
		
		r6 = new Recipe();
		r6.setName("Coffee");
		r6.setPrice(50);
		r6.setAmtCoffee(16);
		r6.setAmtMilk(16);
		r6.setAmtSugar(16);
		r6.setAmtChocolate(16);
	}
	//Successfully adding a recipe
	public void testAddRecipe1() {
		assertTrue(cm.addRecipe(r1));
		
	}
	//Unsuccessfully adding a recipe due to one already existing with the same name
	public void testAddRecipe2() {
		cm.addRecipe(r1);
		assertFalse(cm.addRecipe(r1));
	}
	
	//Successfully deleting a recipe
	public void testDeleteRecipe1() {
		cm.addRecipe(r1);
		assertTrue(cm.deleteRecipe(r1));
	}
	
	//Unsuccessfully deleting a recipe due to the recipe selected being null
	public void testDeleteRecipe2() {
		assertFalse(cm.deleteRecipe(null));
	}
	
	public void testDeleteRecipe3(); {
		assertFalse(cm.deleteRecipe(r1));
	}
	//Successfully editing a recipe
	public void testEditRecipe1() {
		cm.addRecipe(r1);
		Recipe newRecipe = new Recipe();
		newRecipe = r1;
		newRecipe.setAmtSugar(2);
		assertTrue(cm.editRecipe(r1, newRecipe));
	}
	
	//Successfully checking inventory
	public void testCheckInventory1() {
		Inventory result = cm.checkInventory();
		assertNotNull(result);
		assertEquals("Coffee: 15\r\nMilk: 15\r\nSugar: 15\r\nChocolate: 15\r\n", result.toString());
		assertEquals(15, result.getMilk());
		assertEquals(15, result.getSugar());
		assertEquals(15, result.getChocolate());
		assertEquals(15, result.getCoffee());
	}
	
	//Successfully making coffee
	public void testMakeCoffee1() {
		cm.addRecipe(r1);
		int amtPaid = 50;
		int result = cm.makeCoffee(r1, amtPaid);
		assertEquals(0, result);
	}
	
	//Unsuccessfully making coffee due to insufficient funds
	public void testMakeCoffee2() {
		cm.addRecipe(r1);
		int amtPaid = 47;
		int result = cm.makeCoffee(r1, amtPaid);
		assertEquals(47, result);
	}
	
	//Unsuccessfully making coffee due to insufficient inventory
	public void testMakeCoffee3() {
		cm.addRecipe(r6);
		int amtPaid = 50;
		int result = cm.makeCoffee(r6, amtPaid);
		assertEquals(50, result);
	}
	
	//Successfully adding to inventory
	public void testAddInventory1() {
		int amtCoffee = 1;
		int amtMilk = 1;
		int amtSugar = 1;
		int amtChocolate = 1;

		boolean result = cm.addInventory(amtCoffee, amtMilk, amtSugar, amtChocolate);
		assertEquals(true, result);
	}
	
	//Unsuccessfully adding to inventory due to amtCoffee being negative
	public void testAddInventory2() {
		int amtCoffee = -1;
		int amtMilk = 1;
		int amtSugar = 1;
		int amtChocolate = 1;

		boolean result = cm.addInventory(amtCoffee, amtMilk, amtSugar, amtChocolate);
		assertEquals(false, result);
	}
	
	//Unsuccessfully adding to inventory due to amtMilk being negative
	public void testAddInventory3() {
		int amtCoffee = 1;
		int amtMilk = -1;
		int amtSugar = 1;
		int amtChocolate = 1;

		boolean result = cm.addInventory(amtCoffee, amtMilk, amtSugar, amtChocolate);
		assertEquals(false, result);
	}
	
	//Unsuccessfully adding to inventory due to amtSugar being negative
	public void testAddInventory4() {
		int amtCoffee = 1;
		int amtMilk = 1;
		int amtSugar = -1;
		int amtChocolate = 1;

		boolean result = cm.addInventory(amtCoffee, amtMilk, amtSugar, amtChocolate);
		assertEquals(false, result);
	}

	//Unsuccessfully adding to inventory due to amtChocolate being negative
	public void testAddInventory_5() {
		int amtCoffee = 1;
		int amtMilk = 1;
		int amtSugar = 1;
		int amtChocolate = -1;

		boolean result = cm.addInventory(amtCoffee, amtMilk, amtSugar, amtChocolate);
		assertEquals(false, result);
	}
	
	//Successfully getting recipes
	public void testGetRecipes1() {
		Recipe[] result = cm.getRecipes();
		assertNotNull(result);
		assertEquals(4, result.length);
		assertNotNull(result[0]);
		assertEquals(null, result[0].toString());
		assertEquals(null, result[0].getName());
		assertEquals(0, result[0].getPrice());
		assertEquals(0, result[0].getAmtCoffee());
		assertEquals(0, result[0].getAmtMilk());
		assertEquals(0, result[0].getAmtChocolate());
		assertEquals(0, result[0].getAmtSugar());
		assertNotNull(result[1]);
		assertEquals(null, result[1].toString());
		assertEquals(null, result[1].getName());
		assertEquals(0, result[1].getPrice());
		assertEquals(0, result[1].getAmtCoffee());
		assertEquals(0, result[1].getAmtMilk());
		assertEquals(0, result[1].getAmtChocolate());
		assertEquals(0, result[1].getAmtSugar());
		assertNotNull(result[2]);
		assertEquals(null, result[2].toString());
		assertEquals(null, result[2].getName());
		assertEquals(0, result[2].getPrice());
		assertEquals(0, result[2].getAmtCoffee());
		assertEquals(0, result[2].getAmtMilk());
		assertEquals(0, result[2].getAmtChocolate());
		assertEquals(0, result[2].getAmtSugar());
		assertNotNull(result[3]);
		assertEquals(null, result[3].toString());
		assertEquals(null, result[3].getName());
		assertEquals(0, result[3].getPrice());
		assertEquals(0, result[3].getAmtCoffee());
		assertEquals(0, result[3].getAmtMilk());
		assertEquals(0, result[3].getAmtChocolate());
		assertEquals(0, result[3].getAmtSugar());
	}
	
	//Successfully returns recipe associated with given name
	public void testGetRecipeForName1() {
		String name = "";
		Recipe result = cm.getRecipeForName(name);

		assertNotNull(result);
		assertEquals(null, result.toString());
		assertEquals(null, result.getName());
		assertEquals(0, result.getPrice());
		assertEquals(0, result.getAmtCoffee());
		assertEquals(0, result.getAmtMilk());
		assertEquals(0, result.getAmtChocolate());
		assertEquals(0, result.getAmtSugar());
	}
	
	//Successfully returns recipe associated with given name
	public void testGetRecipeForName2() {
		cm.addRecipe(r1);
		String name = "Coffee";
		Recipe result = cm.getRecipeForName(name);
		
		assertNotNull(result);
	}
}